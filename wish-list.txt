Software I wish existed and would welcome discovering. I strongly prefer open
source, but closed source is often better than nothing:


A real-time audio synthesis engine that runs on general-purpose computing
hardware and intelligently scales up number of simultaneous patches/polyphony
based on available hardware resources.
[TessellationOS](http://tessellation.cs.berkeley.edu/) could be an excellent OS
to implement this system on, if/when it reaches a public release. This one I
really would require open-source for - what I want is for the patches I design
to never become unplayable. You can see my scribbled notes on this concept at
https://github.com/NateEag/audio-engine.


A better version control system than Git/Mercurial/et al. See
https://github.com/NateEag/next-vcs for my slow-evolving thoughts on the
subject.


A distributed command-line code review system that integrates cleanly with
native git, with an optional web UI for ease-of-use. It should support tracking
a branch's entire history (including rebases) without requiring extra
abstractions (like Gerrit's Changeset-Id). Some haphazard design notes on how
it might be built are at https://github.com/NateEag/git-revue.


An open source, local-first calorie tracker (but with optional support for
hitting servers for specific data). I initially thought of this as an Android
app, but perhaps it would be better conceived of as a network API (HTTP, I
assume, because that's what I know) which has both desktop and mobile UIs. The
mobile UI can't be a pure website because I want to support scanning barcodes
for branded foods, pulling the data from the free USDA branded food products DB
(which can be downloaded so you can use it in a local-first app).


An introduction to the basics of RESTful APIs in the form of a text-based
adventure. Support the HTTP verbs as commands, and have the player manipulate
the world to achieve victory conditions. I need to think of a scenario where
object creation and destruction makes sense... Maybe make the player a god of
some sort?


A program to filter style/static checker results by lines added and changed
in the diff between commits. In-progress at
https://github.com/NateEag/diff-check.


A really good schema exploration UI, something interactive and immediate that
is both pretty and functional. In particular, I make heavy use of formal
comments in my schemas, and none of the ones I've encountered handle that at
all well.


An HTML/CSS/JS style checker that warns you when a construct is not supported
by targeted browsers. The data backing caniuse should make this possible
(https://github.com/fyrd/caniuse), but it could be fairly complex to adapt it
to work with HTML/CSS/JS parsers. check-caniuse might be an okay name?
check-browser-compat?


A program that takes two SQL schemas and outputs the SQL to convert one to the
other. Call it schema-diff. Liquibase has parts of this, but it's not clear to
me that schema-diff as such is there (see potential-technologies.txt).


A system for proving that a webpage existed on a particular domain at a
specific point in time with specific contents. I'm not sure this is achievable,
but it has obvious utility when faced with bad-faith editing of websites.
Fundamentally, though, any mechanism is probably defeatable by a
sufficiently-motivated attacker - any "I'm trustworthy" signature can be
suborned, and any consensus-in-the-blockchain can be brute-forced by a 51%
attack.


A way to force YouTube (and similar) links to open in VLC. Keeping me away from
their video recommendation algorithms would be a win. It would be possible to
make a Chrome extension that does this by building a dumb little local server
and using the native messaging API to fire off "open link in VLC" shell
commands via the server (maybe using
[Streamlink](https://github.com/streamlink/streamlink)), which should do the
job if Chrome is your default browser.


A program that sends monitoring alerts if specific actions are not taken
rapidly after SSH logins. The hypothetical name 'tripwire' gets across the idea
here - if someone gets SSH access to your machines but they don't know your
tripwire configuration, you'll be alerted rapidly. I'm not sure it would help
much, since deployment code has to either include the tripwire config or be
whitelisted for tripwire somehow. Still, security is all about layers of
defense, and this could be another one.
