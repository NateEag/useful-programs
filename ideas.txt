This file contains program concepts I find interesting, but am not sure I
actually want to use.


A platform for publishing anonymously, with support for retroactively
unveiling yourself as the author. By requiring the public half of a
single-use key pair at initial submission, the original author can
retroactively claim authorship by publicly releasing a signed claim to
authorship.


A RESTish HTTP API for receiving messages, usable as a backwards-compatible
alternative to email. I'm not sure I actually like this idea, because building
a new protocol on top of HTTP is kinda suspicious - it's just an interesting
thought. If it's open-source, anyone can bring up an instance and use a URL as
their point of contact, with an email address that just forwards to the API's
backend. API instance could offer a message submission form (a.k.a. "contact
form"), as well as your mailchecking API. You could probably do something in
this API's design to help solve the spam problem, such as adding a captcha
layer to the "send me an email" interaction, and by offering a mechanism to
whitelist trusted senders (perhaps driven by signed tokens that are part of the
submission, and requiring message origin URL on messages that want to bypass
the captcha, thereby making it possible for the recipient to check with the
sender for the token's validity). Mailgun is not unrelated to this concept, but
is not exactly what I'm thinking of: http://www.mailgun.com/


A program that detects poor code structure by examining parse trees. I'm
roughly thinking of this as a literate programming version of Fowler's
"Refactoring" book. That book would be more useful as a program that points out
code that can be refactored. Making it operate on parse trees is based on the
idea that many refactorings are not really language-specific - they're about
logical concepts that may be describable in abstract parse-tree forms, as long
as you have some shared concepts of scope, variables, functions, and a few of
the common keywords. That said, this concept might well be crazy-town.
